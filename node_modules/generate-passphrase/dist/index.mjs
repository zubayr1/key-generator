import t from"crypto";import{readFileSync as r}from"fs";import{dirname as e,resolve as o}from"path";import{fileURLToPath as n}from"url";
/**
 * @module generate-passphrase
 * @author Reinaldy Rafli <aldy505@tutanota.com>
 * @license MIT
 */let s,a;function p(){return(void 0===a||a>=s.length)&&(s=t.randomBytes(256),a=0),a+=1,s[a]}function l(t,r=!1){if(r)return Math.floor(Math.random()*t);let e=p();for(;void 0===e||e>=256-256%t;)e=p();return e%t}const u=r(o(e(n(import.meta.url)),"./words.txt"),"utf8").split("\n");function f(r=!1){const e=r?Math.floor(Math.random()*u.length):t.randomInt(0,u.length);return u[e]}
/**
 * Generate a passphrase with options
 * @param {generateOptions} options - The options
 * @returns {string} - A passphrase
 * @see Usage https://github.com/aldy505/generate-passphrase#how-to-use-this
 */function i(t={}){const r=Object.assign(Object.assign({},{length:4,separator:"-",numbers:!0,uppercase:!1,titlecase:!1,pattern:null,fast:!1}),t);if(r.length<=0)throw new Error("Length should be 1 or bigger. It should not be zero or lower.");const e=[];let o;o=r.pattern?r.pattern.toUpperCase():function(t,r,e=!1){const o=r?"NWW":"WWW";let n="";for(let r=0;r<t;r++)n+=o[l(2,e)];return n}(r.length,r.numbers,r.fast);const n=o.split("");for(let t=0;t<n.length;t+=1)if("N"===n[t])e.push(p());else{if("W"!==n[t])throw new Error("Unknown pattern found. Use N or W instead.");{const t=f(r.fast);r.uppercase?e.push(t.toUpperCase()):r.titlecase?e.push(t.replace(/\w\S*/g,(t=>t.charAt(0).toUpperCase()+t.substr(1).toLowerCase()))):e.push(t)}}return e.join(r.separator)}
/**
 * Generate multiple passphrase with the same options
 * @param {number} amount - The number of passphrase returned
 * @param {generateOptions} options - The options
 * @returns {string[]} - Array of passphrases
 * @see Usage https://github.com/aldy505/generate-passphrase#how-to-use-this
 */function c(t,r={}){const e=[];for(let o=0;o<t;o++)e[o]=i(r);return e}export{i as generate,c as generateMultiple};
