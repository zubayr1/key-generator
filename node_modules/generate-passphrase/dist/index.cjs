"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("crypto"),t=require("fs"),r=require("path"),n=require("url");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(e);
/**
 * @module generate-passphrase
 * @author Reinaldy Rafli <aldy505@tutanota.com>
 * @license MIT
 */const u=n.fileURLToPath("undefined"==typeof document?new(require("url").URL)("file:"+__filename).href:document.currentScript&&document.currentScript.src||new URL("index.cjs",document.baseURI).href),a=r.dirname(u);let l,i;function c(){return(void 0===i||i>=l.length)&&(l=s.default.randomBytes(256),i=0),i+=1,l[i]}function f(e,t=!1){if(t)return Math.floor(Math.random()*e);let r=c();for(;void 0===r||r>=256-256%e;)r=c();return r%e}const p=t.readFileSync(r.resolve(a,"./words.txt"),"utf8").split("\n");function d(e=!1){const t=e?Math.floor(Math.random()*p.length):s.default.randomInt(0,p.length);return p[t]}
/**
 * Generate a passphrase with options
 * @param {generateOptions} options - The options
 * @returns {string} - A passphrase
 * @see Usage https://github.com/aldy505/generate-passphrase#how-to-use-this
 */function h(e={}){const t=Object.assign(Object.assign({},{length:4,separator:"-",numbers:!0,uppercase:!1,titlecase:!1,pattern:null,fast:!1}),e);if(t.length<=0)throw new Error("Length should be 1 or bigger. It should not be zero or lower.");const r=[];let n;n=t.pattern?t.pattern.toUpperCase():function(e,t,r=!1){const n=t?"NWW":"WWW";let o="";for(let t=0;t<e;t++)o+=n[f(2,r)];return o}(t.length,t.numbers,t.fast);const o=n.split("");for(let e=0;e<o.length;e+=1)if("N"===o[e])r.push(c());else{if("W"!==o[e])throw new Error("Unknown pattern found. Use N or W instead.");{const e=d(t.fast);t.uppercase?r.push(e.toUpperCase()):t.titlecase?r.push(e.replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()))):r.push(e)}}return r.join(t.separator)}
/**
 * Generate multiple passphrase with the same options
 * @param {number} amount - The number of passphrase returned
 * @param {generateOptions} options - The options
 * @returns {string[]} - Array of passphrases
 * @see Usage https://github.com/aldy505/generate-passphrase#how-to-use-this
 */exports.generate=h,exports.generateMultiple=function(e,t={}){const r=[];for(let n=0;n<e;n++)r[n]=h(t);return r};
